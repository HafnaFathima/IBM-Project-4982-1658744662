# -*- coding: utf-8 -*-
"""LiverDiseasePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qdcWR_v_iW9UVSimYeOAYpqxlND0gi0j
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import pickle
from mpl_toolkits.mplot3d import Axes3D

df=pd.DataFrame(pd.read_csv("/content/drive/MyDrive/indian_liver_patient.csv"))
df

df.head()

df.tail()

df.info()

df.describe()

df.isnull().any()

df.isnull().sum()

df=df.dropna()

df.isnull().sum()

sns.countplot(data=df,x='Gender',label='Count')
m,f=df['Gender'].value_counts()
print('Number of males',m)
print('Number of females',f)

sns.countplot(data=df,x='Dataset')
LD,NLD=df['Dataset'].value_counts();
print('Liver disease patients',LD)
print('Non liver disease patients',NLD)

df['Gender']=np.where(df['Gender']=='Female',0,df['Gender'])
df['Gender']=np.where(df['Gender']=='Male',1,df['Gender'])

sns.scatterplot(x=df.index,y=df['Alkaline_Phosphotase'],hue=df['Total_Bilirubin'])

plt.scatter(df.index,df['Total_Protiens'])

plt.scatter(df['Total_Bilirubin'],df['Total_Protiens'])
plt.title('Total_Bilirubin vs Total_Protiens')
plt.xlabel('Total_Bilirubin')
plt.ylabel('Total_Protiens')

plt.scatter(df['Total_Bilirubin'],df['Direct_Bilirubin'])
plt.title('Total_Bilirubin vs Direct_Bilirubin')
plt.xlabel('Total_Bilirubin')
plt.ylabel('Direct_Bilirubin')

sns.boxplot(df['Alamine_Aminotransferase'])

Q1=np.percentile(df['Alamine_Aminotransferase'],25,interpolation = 'midpoint')
Q3=np.percentile(df['Alamine_Aminotransferase'],75,interpolation = 'midpoint')
IQR=Q3-Q1

df.shape

upper=np.where(df['Alamine_Aminotransferase'] >= (Q3+1.5*IQR))
lower=np.where(df['Alamine_Aminotransferase'] <= (Q1-1.5*IQR))

df.drop(upper[0],inplace = True)
df.drop(lower[0],inplace = True)

df.shape

x=df.drop(columns='Dataset')
y=df['Dataset']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.8,random_state=4)

x_train.shape

y_train.shape

x_test.shape

y_test.shape
